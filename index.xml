<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>我的第一个博客</title>
    <link>http://pccmast.github.io/</link>
    <description>Recent content on 我的第一个博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Wed, 30 Sep 2020 19:32:13 +0800</lastBuildDate><atom:link href="http://pccmast.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hashmapimplements</title>
      <link>http://pccmast.github.io/posts/hashmap%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 30 Sep 2020 19:32:13 +0800</pubDate>
      
      <guid>http://pccmast.github.io/posts/hashmap%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>jdk11的HashMap源码分析 文档注释部分：  HashMap是无序的，特别是不保证顺序随时间不变 get 和 put 操作是常量时间复杂度的&amp;mdash;O(1) 装载因子设置为0.75，平衡了空间和时间消耗。更高的装载因子降低了空间成本却增大了查找的花费，导致put、get操作时间变慢。 如果初始容量（initial capacity）比最大元素数（maximum number of entries）除以装载因子的值还大，那么不会再进行rehash操作。 一般采用桶（binned、bucketed）哈希表，但是如果桶元素太多，会变成树（TreeNodes），树的结构就像TreeMap 由于 resize 和 removal 操作导致树的结点太少的时候，会将红黑树变为哈希桶（untreeified）  继承关系 public class HashMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt; implements Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable  HashMap可被序列化，可被克隆  参数 static final int DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; // aka 16 // 必须是2的幂 static final int MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30; // 必须是2的幂 static final float DEFAULT_LOAD_FACTOR = 0.75f; static final int TREEIFY_THRESHOLD = 8; // 当一个hash桶的元素数大于8，那么就变成红黑树实现  static final int UNTREEIFY_THRESHOLD = 6; // 当resize让一个树的元素小于6时，就把它变为桶  static final int MIN_TREEIFY_CAPACITY = 64; // 整个hash表执行树化操作的最小容量，表里的元素数大于64才会树化桶 put()  代码注解来源</description>
    </item>
    
    <item>
      <title>包管理与Maven</title>
      <link>http://pccmast.github.io/posts/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 26 Sep 2020 10:46:32 +0800</pubDate>
      
      <guid>http://pccmast.github.io/posts/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>JVM的类加载   JVM的工作被设计地相当简单：
 执行一个类的字节码 假如这个过程中碰到了新的类，加载它    寻找类的地方：classpath（类路径）。
  类的全限定类名（目录层级，比如 com.github.hscp.XXX）唯一确定了一个类
  包就是把许多类放在⼀一起打的压缩包
  classpath hell 当多个同名类同时出现在classpath中时，就是噩梦的开始，jdk会不知道使用哪个类。并且你也很难发现这个错误。
* 比如，a 路径中有 com.github.hscp.Cat b 路径中也有 com.github.hscp.Cat  包管理 包管理的本质就是告诉JVM如何找到所需的第三⽅方类库，以及成功地解决其中的冲突问题
黑暗岁月 手动写命令进行编译运行
启蒙时代 Apache Ant
 手动下载jar包，放在一个目录中 写XML配置，指定编译的源代码目录、依赖的jar包、输出目录等  缺点
 每个人都要自⼰造一套轮子（定义存放包的路径） 依赖的第三方类库都需要手动下载，费时费力 假如你的应用依赖了一万个第三方的类库呢？ 没有解决 Classpath 地狱的问题  光明时代 Maven 时代
 思想：Convention over configuration（约定优于配置） Maven 远不不止是包管理工具 Maven 有两个仓库，中央仓库和本地仓库  Maven 的中央仓库按照一定的约定储存包   Maven 的本地仓库  默认位于 ~/.</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://pccmast.github.io/posts/my-first-post/</link>
      <pubDate>Tue, 15 Sep 2020 19:50:35 +0800</pubDate>
      
      <guid>http://pccmast.github.io/posts/my-first-post/</guid>
      <description>我的第一篇博客 安装Hugo   Mac 安装方式：
 brew install hugo hugo version    Windows 安装方式：
 Hugo release 网站下载 hugo 解压hugo文件夹 把 &amp;hellip;\hugo 加入PATH 重启终端    安装完成的标志：命令行输入 hugo version 显示代码
使用 Hugo+Github 快速搭建博客 Hugo 生成页面 1. 进入 Hugo 官网，点击首页的 Quick Start， 按照官网教程操作。 2. 命令行操作，新建一个网站。  hugo new site 网站名   该命令会在当前目录下新建 网站名 文件夹。 在这里将文件夹取名pccmast.github.io-creator  3. cd 进入新创建的文件夹，使用git init，新建仓库, 并从github 下载网站主题 git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke 把主题添加到网站设置中</description>
    </item>
    
  </channel>
</rss>
